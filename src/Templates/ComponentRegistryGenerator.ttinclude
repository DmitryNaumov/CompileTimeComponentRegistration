<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDte" #>
<#@ assembly name="VSLangProj" #>
<#@ include file="VisualStudioHelper.ttinclude" #>
<#@ import namespace="EnvDTE" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------ 
// <auto-generated> 
// This code was generated by a tool. 
// Changes to this file may cause incorrect behavior and will be lost if 
// the code is regenerated. 
// </auto-generated> 
//------------------------------------------------------------------------------

namespace <#= VisualStudioHelper.CurrentProject.Properties.Item("RootNamespace").Value.ToString() #>
{
    public class ComponentRegistry : StructureMap.Configuration.DSL.Registry
    {
        public ComponentRegistry()
        {
<#
    var projectDef = VisualStudioHelper.CurrentProject;
    {
        foreach (var classDef in GetAllClassesFromProject(projectDef))
        {
            var attribute = FindComponentRegistrationAttribute(classDef);
            if (attribute == null)
            {
                continue;
            }

            foreach (var @interface in GetInterfases(classDef))
            {
#>
            Profile(<#=attribute.Value#>, p => p.For(typeof(<#=@interface.FullName#>)).Singleton().Use(typeof(<#=classDef.FullName#>)));
<#
            }
        }
    }
#>
        }
    }
}

<#+
    private IEnumerable<CodeClass> GetAllClassesFromProject(Project projectDef)
    {
        return VisualStudioHelper
            .CodeModel
            .GetAllCodeElementsOfType(projectDef.CodeModel.CodeElements, vsCMElement.vsCMElementClass, false)
            .Cast<CodeClass>();
    }

    private CodeAttribute FindComponentRegistrationAttribute(CodeClass classDef)
    {
        return VisualStudioHelper
            .CodeModel
            .GetAllCodeElementsOfType(classDef.Attributes, vsCMElement.vsCMElementAttribute, false)
            .FirstOrDefault(attr => attr.Name == "ComponentRegistration") as CodeAttribute;
    }

    private IEnumerable<CodeInterface> GetInterfases(CodeClass classDef)
    {
        return VisualStudioHelper
            .CodeModel
            .GetAllImplementedInterfaces(classDef)
            .Where(i => i.FullName != typeof(IDisposable).FullName);
    }
#>
